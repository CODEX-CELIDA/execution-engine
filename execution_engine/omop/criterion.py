import copy
from abc import ABC, abstractmethod
from typing import Iterator, Union

import sqlparse

from execution_engine.omop import StandardConcepts


class AbstractCriterion(ABC):
    """
    Abstract base class for Criterion and CriterionCombination.
    """

    def __init__(self, name: str, exclude: bool = False):
        self._name: str = name
        self._exclude: bool = exclude

    @property
    def exclude(self) -> bool:
        """Return the exclude flag."""
        return self._exclude

    @property
    def type(self) -> str:
        """
        Get the type of the criterion.
        """
        return self.__class__.__name__

    @property
    def name(self) -> str:
        """
        Get the name of the criterion.
        """
        return str(self)

    def invert_exclude(self, inplace: bool = False) -> "AbstractCriterion":
        """
        Invert the exclude flag.
        """
        if inplace:
            self._exclude = not self._exclude
            return self
        else:
            criterion = copy.deepcopy(self)
            criterion._exclude = not criterion._exclude
            return criterion

    def __str__(self) -> str:
        """
        Get the name of the criterion.
        """
        return self.type + "_" + self._name


class Criterion(AbstractCriterion):
    """A criterion in a cohort definition."""

    def __init__(self, name: str, exclude: bool = False):
        super().__init__(name, exclude)
        self._table_in: str | None = None
        self._table_out: str | None = None

    @property
    def table_in(self) -> str:
        """
        Get the name of the table to use as input for this criterion.
        """
        if self._table_in is None:
            raise ValueError("table_in has not been set - call sql_generate first")
        return self._table_in

    @property
    def table_out(self) -> str:
        """
        Get the name of the temporary table generated by executing this criterion.
        """
        if self._table_out is None:
            raise ValueError("table_out has not been set - call sql_generate first")
        return self._table_out

    def _sql_header(self, table_in: str | None, table_out: str) -> str:
        """
        Generate the header of the SQL query.
        """
        self._table_in = table_in
        self._table_out = table_out
        return f"SELECT DISTINCT person_id\nINTO {table_out}\nFROM {table_in}\n"

    @abstractmethod
    def _sql_generate(self, sql_select: str) -> str:
        """
        Get the SQL representation of the criterion.
        """
        raise NotImplementedError()

    def sql_generate(self, table_in: str | None, table_out: str) -> str:
        """
        Get the SQL representation of the criterion.
        """
        sql = self._sql_header(table_in, table_out)
        sql = self._sql_generate(sql)
        sql = self._sql_post_process(sql)
        return sql

    def _sql_post_process(self, sql: str) -> str:
        if self.exclude:
            sql = f"(SELECT person_id FROM {self.table_in}) EXCEPT ({sql})"  # nosec - this is actual SQL code (generated)
        sql = sqlparse.format(sql, reindent=True, keyword_case="upper")
        return sql

    def sql_select(self) -> str:
        """
        Get the SQL to select the person_id column from the temporary table generated by executing this criterion.
        """

        sql = f"SELECT person_id FROM {self.table_out}"  # nosec - this is actual SQL code (generated)

        return self._sql_post_process(sql)

    def sql_cleanup(self) -> str:
        """
        Get the SQL to drop the temporary table generated by executing this criterion.
        """
        return f"DROP table {self.table_out}"


class CriterionCombination(AbstractCriterion):
    """
    A combination of criteria.
    """

    class Operator:
        """Operators for criterion combinations."""

        AND = "AND"
        OR = "OR"
        AT_LEAST = "AT_LEAST"
        AT_MOST = "AT_MOST"
        EXACTLY = "EXACTLY"

        def __init__(self, operator: str, threshold: int | None = None):
            self.operator = operator
            if operator in ["AT_LEAST", "AT_MOST", "EXACTLY"]:
                assert (
                    threshold is not None
                ), f"Threshold must be set for operator {operator}"
            self.threshold = threshold

    def __init__(self, name: str, exclude: bool, operator: Operator):
        """
        Initialize the criterion combination.
        """
        super().__init__(name, exclude)
        self._operator = operator
        self._criteria: list[AbstractCriterion] = []

    def add(self, criterion: AbstractCriterion) -> None:
        """
        Add a criterion to the combination.
        """
        self._criteria.append(criterion)

    @property
    def name(self) -> str:
        """
        Get the name of the criterion combination.
        """
        return str(self)

    @property
    def operator(self) -> "CriterionCombination.Operator":
        """
        Get the operator of the criterion combination.
        """
        return self._operator

    def __iter__(self) -> Iterator[Union[Criterion, "CriterionCombination"]]:
        """
        Iterate over the criteria in the combination.
        """
        for criterion in self._criteria:
            yield criterion


class ActivePatients(Criterion):
    """
    Select only patients who are still hospitalized.
    """

    def __init__(self, name: str, hours_back: int):
        super().__init__(name)
        self.hours_back = hours_back

    def _sql_generate(self, sql_header: str) -> str:
        """
        Get the SQL representation of the criterion.
        """
        if self._table_in is not None:
            raise ValueError("ActivePatients must be the first criterion")
        sql = self._sql_header("VISIT_OCCURRENCE", self.table_out)
        sql += f"""
        WHERE visit_type_concept_id = {StandardConcepts.VISIT_TYPE_STILL_PATIENT.value}
        """
        return sql


class ConditionOccurrence(Criterion):
    """A condition occurrence criterion in a cohort definition."""

    pass


class DrugExposure(Criterion):
    """A drug exposure criterion in a cohort definition."""

    pass


class Measurement(Criterion):
    """A measurement criterion in a cohort definition."""

    pass


class Observation(Criterion):
    """An observation criterion in a cohort definition."""

    pass


class ProcedureOccurrence(Criterion):
    """A procedure occurrence criterion in a cohort definition."""

    pass


class VisitOccurrence(Criterion):
    """A visit criterion in a cohort definition."""

    pass
